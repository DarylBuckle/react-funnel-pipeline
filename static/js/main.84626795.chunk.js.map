{"version":3,"sources":["data.tsx","../../src/FunnelChart.tsx","App.tsx","index.tsx"],"names":["data","name","value","initialState","FunnelChart","setFunnelRows","this","props","showNames","showValues","showRunningTotal","heightRelativeToValue","chartHeight","getRowStyle","getRowNameStyle","getRowValueStyle","getToolTip","onRowClick","rows","totalValue","sizePerValue","totalHeight","window","runningTotal","thisRow","showTitle","showValue","rowStyle","rowTitleStyle","rowValueStyle","size","i1","toolTip","key","className","styles","style","title","onClick","undefined","React","getTotalValue","dataTotal","render","chartStyles","Object","marginBottom","pallette","App","useState","optionShowName","setOptionShowName","optionShowValue","setOptionShowValue","optionShowRunning","setOptionShowRunning","optionShowTitle","setOptionShowTitle","setChartHeight","width","href","marginTop","JSON","stringify","type","checked","onChange","margin","row","color","alert","e","target","isNaN","Number","parseInt","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.84626795.chunk.js","sourcesContent":["\nconst data = [\n  { name: 'Awareness', value: 252 },\n  { name: 'Interest', value: 105 },\n  { name: 'Consideration', value: 84 },\n  { name: 'Evaluation', value: 72 },\n  { name: 'Commitment', value: 19 },\n  { name: 'Sale', value: 10 }\n]\n\nexport default data\n","import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface IFunnelChartProps {\n  data: any\n  title?: string\n  showValues: boolean\n  showNames: boolean\n  pallette: string[]\n  showRunningTotal: boolean\n  heightRelativeToValue: boolean\n  chartHeight?: number\n  chartWidth?: number\n  style?: any\n  getRowStyle?: (row: any) => any\n  getRowNameStyle?: (row: any) => any\n  getRowValueStyle?: (row: any) => any\n  getToolTip?: (row: any) => string\n  onRowClick?: (row: any) => void\n}\n\ninterface IFunnelChartState {}\n\nconst initialState: IFunnelChartState = {}\n\nclass FunnelChart extends React.Component<\n  IFunnelChartProps,\n  IFunnelChartState\n> {\n  static defaultProps = {\n    showValues: true,\n    showNames: true,\n    pallette: [\n      '#f14c14',\n      '#f39c35',\n      '#68BC00',\n      '#1d7b63',\n      '#4e97a8',\n      '#4466a3'\n    ],\n    showRunningTotal: false,\n    heightRelativeToValue: false\n  }\n\n  constructor(props: IFunnelChartProps) {\n    super(props)\n    this.state = initialState\n  }\n\n  setFunnelRows() {\n    const {\n      data,\n      showNames,\n      showValues,\n      showRunningTotal,\n      heightRelativeToValue,\n      chartHeight,\n      getRowStyle,\n      getRowNameStyle,\n      getRowValueStyle,\n      getToolTip,\n      onRowClick\n    } = this.props\n    const rows = []\n    const totalValue = this.getTotalValue()\n\n    let sizePerValue = 0\n    if (heightRelativeToValue && totalValue > 0) {\n      let totalHeight = chartHeight\n      if (!totalHeight) {\n        totalHeight = 500\n        if (window.innerWidth < 500) {\n          totalHeight = 300\n        }\n      }\n      sizePerValue = totalHeight / totalValue\n    }\n\n    var runningTotal = totalValue\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        const thisRow = data[i1]\n        let showTitle = true\n        let showValue = true\n\n        if (thisRow.value > 0) {\n          let rowStyle: any = {}\n          let rowTitleStyle: any = {}\n          let rowValueStyle: any = {}\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow)\n          }\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow)\n          }\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow)\n          }\n\n          if (heightRelativeToValue) {\n            const size = sizePerValue * thisRow.value\n            rowStyle.height = size + 'px'\n            rowStyle.maxHeight = size + 'px'\n            if (size < 65) {\n              showValue = false\n            }\n            if (size < 40) {\n              showTitle = false\n            }\n          }\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor\n          }\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = this.props.pallette[\n              i1 % this.props.pallette.length\n            ]\n          }\n\n          if (!showNames) {\n            showTitle = false\n          }\n          if (!showValues) {\n            showValue = false\n          }\n\n          let toolTip = thisRow.name + '\\n' + runningTotal\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow)\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer'\n          }\n\n          rows.push(\n            <div\n              key={'funnel-pipeline-chart-row-' + thisRow.name}\n              className={styles['funnel-pipeline-chart-row']}\n              style={rowStyle}\n              title={toolTip}\n              onClick={\n                typeof onRowClick === 'function'\n                  ? () => onRowClick(thisRow)\n                  : undefined\n              }\n            >\n              <div>\n                {showTitle ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-title']}\n                    style={rowTitleStyle}\n                  >\n                    {thisRow.name}\n                  </div>\n                ) : null}\n                {showValue ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-value']}\n                    style={rowValueStyle}\n                  >\n                    {showRunningTotal ? runningTotal : thisRow.value}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          )\n        }\n\n        runningTotal = runningTotal - thisRow.value\n      }\n    }\n\n    return rows\n  }\n\n  getTotalValue() {\n    const { data } = this.props\n\n    let dataTotal = 0\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value\n      }\n    }\n\n    return dataTotal\n  }\n\n  render() {\n    const { title, style } = this.props\n\n    const chartStyles: any = {}\n    if (style) {\n      Object.assign(chartStyles, style)\n    }\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth\n    }\n\n    return (\n      <div className={styles['funnel-pipeline-chart']} style={chartStyles}>\n        {title ? <h2 style={{ marginBottom: '30px' }}>{title}</h2> : null}\n        {this.setFunnelRows()}\n      </div>\n    )\n  }\n}\n\nexport default FunnelChart\n","import React, { useState } from 'react'\nimport data from './data'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport { FunnelChart } from 'react-funnel-pipeline'\nimport 'react-funnel-pipeline/dist/index.css'\n\nconst App = () => {\n  const [optionShowName, setOptionShowName] = useState(true)\n  const [optionShowValue, setOptionShowValue] = useState(true)\n  const [optionShowRunning, setOptionShowRunning] = useState(true)\n  const [optionShowTitle, setOptionShowTitle] = useState(true)\n  const [chartHeight, setChartHeight] = useState('500')\n\n  return (\n    <div>\n      <nav className='navbar navbar-expand-lg navbar-dark bg-primary fixed-top'>\n          <div style={{width:'100%'}}>\n              <ul className='navbar-nav ml-lg-5'>\n                  <li className='nav-item mr-lg-3'>\n                      <a className={'nav-link active'} href='.'>Examples</a>\n                  </li>\n                  <li className='nav-item mr-lg-3'>\n                      <a className={'nav-link'} href='http://github.com/darylbuckle/react-funnel-pipeline'>Documentation</a>\n                  </li>\n              </ul>\n          </div>\n      </nav>\n\n      <div className='container' style={{marginTop:'100px'}}>\n        <h1 className='mb-5'>react funnel pipeline examples</h1>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Basic Funnel</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                A basic out-the-box react-funnel-pipeline without any customization.\n                <br /><br />\n                Only the \"data\" prop is set. \"data\" must be an array of objects containing at least \"name\" (string) and \"value\" (number) attributes. In this case it is;\n              </p>\n              <pre>\n                {JSON.stringify(data, null, 2)}\n              </pre>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Funnel Options</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Some options that you can enable/disable.\n              </p>\n              <div>\n                <div><input type='checkbox' checked={optionShowName} onChange={() => setOptionShowName(!optionShowName)}></input><label>Show Row Names</label></div>\n                <div><input type='checkbox' checked={optionShowValue} onChange={() => setOptionShowValue(!optionShowValue)}></input><label>Show Row Values</label></div>\n                <div><input type='checkbox' checked={optionShowRunning} onChange={() => setOptionShowRunning(!optionShowRunning)}></input><label>Show Running Total</label></div>\n                <div><input type='checkbox' checked={optionShowTitle} onChange={() => setOptionShowTitle(!optionShowTitle)}></input><label>Show Chart Title</label></div>\n              </div>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n                showNames={optionShowName}\n                showValues={optionShowValue}\n                showRunningTotal={optionShowRunning}\n                title={optionShowTitle ? 'This is the title' : undefined}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Colours and Styles</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Parse \"pallette\" (array of hex colour strings) to change the colours used. Each row in \"data\" can have a backgroundColor attribute to set the colour for that row.\n                <br/><br/>\n                The \"style\" prop can be used to parse additional styles to the chart.\n                <br/><br/>\n                The \"getRowStyle\", \"getRowNameStyle\" and \"getRowValueStyle\" props are functions which can be used to customise the style of particular rows.\n              </p>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n                pallette={[\n                  '#ffb3ba',\n                  '#ffdfba',\n                  '#ffffba',\n                  '#baffc9',\n                  '#bae1ff',\n                ]}\n                getRowStyle={() => { return { margin: '0px'} }}\n                getRowNameStyle={(row) => { return row.value < 15 ? { color: 'red'} : { color: 'black'}}}\n                getRowValueStyle={(row) => { return row.value < 15 ? { color: 'red'} : { color: 'black'}}}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Events</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                Use \"onRowClick\" to act on a particular row being clicked.\n                <br/><br/>\n                The selected row will be parsed as a parameter.\n                <br/><br/>\n                Click a row on this example to see for yourself.\n              </p>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n                onRowClick={(row) => { window.alert('You clicked on ' + row.name)}}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Relative Height</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                When \"heightRelativeToValue\" is true, each row/segment has it's height relative to it's value.\n                <br/><br/>\n                The chart must be a fixed height when this setting is active. The \"chartHeight\" prop can be customised.\n              </p>\n              <div>\n                <div><label>Height: </label><input type='number' value={chartHeight} onChange={(e) => setChartHeight(e.target.value)}></input></div>\n              </div>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n                heightRelativeToValue={true}\n                chartHeight={!isNaN(Number(chartHeight)) ? parseInt(chartHeight) : undefined}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='mt-3 mb-5'>\n          <h2 className='mb-4'>Additional Customisation</h2>\n          <div className='row'>\n            <div className='col-md-6'>\n              <p>\n                This example uses \"getToolTip\" to change the title for each row/segment.\n                <br/><br/>\n                Hover over a row/segment of this example to see it in action.\n              </p>\n            </div>\n            <div className='col-md-6'>\n              <FunnelChart \n                data={data}\n                getToolTip={(row) => { return 'This is a custom tooltip for ' + row.name}}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}